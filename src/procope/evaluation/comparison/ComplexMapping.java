/*
 * This file is part of ProCope
 *
 * ProCope is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ProCope is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ProCope.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2008, Teaching and Research Unit Bioinformatics, LMU Munich
 * http://www.bio.ifi.lmu.de/Complexes/ProCope/
 *
 */
package procope.evaluation.comparison;


/**
 * Represents a mapping between two complexes. These mappings are collected
 * in {@link ComplexMappings} objects generated by the mapping methods of
 * {@link ComplexSetComparison}.
 * 
 * @author Jan Krumsiek
 */
public class ComplexMapping {
	
	int complexInA, complexInB;
	int overlap;
	
	/**
	 * Creates a new complex mapping.
	 * 
	 * @param complexInA index of complex in first set
	 * @param complexInB index of complex in second set
	 * @param overlap overlap of the two complexes
	 */
	public ComplexMapping(int complexInA, int complexInB, int overlap) {
		this.complexInA = complexInA;
		this.complexInB = complexInB;
		this.overlap = overlap;
	}

	/**
	 * Returns the complex in complex set A of this mapping. This is not
	 * the complex object itsself but the <u>index</u> of the complex in the 
	 * respective complex set
	 * 
	 * @return index of complex in set A
	 */
	public int getComplexInA() {
		return complexInA;
	}
	
	/**
	 * Returns the complex in complex set B of this mapping. This is not
	 * the complex object itsself but the <u>index</u> of the complex in the 
	 * respective complex set
	 * 
	 * @return index of complex in set B
	 */
	public int getComplexInB() {
		return complexInB;
	}
	
	/**
	 * Gets the overlap between the two complexes in this mapping
	 * 
	 * @return overlap between the mapped complexes
	 */
	public int getOverlap() {
		return overlap;
	}
	
	
	
}
